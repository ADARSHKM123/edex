

exports.home =async (req,res)=>{

    // res.render('index',{admin:true});
    try{
        const queryObj = {...req.query}
        console.log(queryObj);
        const excludedFields = ['page','sort','limit','fields'];
        excludedFields.forEach(el=> delete queryObj[el]);

       //Advance Filtering
       let queryStr = JSON.stringify(queryObj);
       queryStr = queryStr.replace(/\b(gte|gt|lte|lt)\b/g, match => `$${match}`);
    //    console.log(JSON.parse(queryStr));
        let query = Product.find(JSON.parse(queryStr));


        // 1)sorting
        if(req.query.sort){
            const sortBy = req.query.sort.split(',').join(' ');

            query= query.sort(sortBy)
        }else{
            query=query.sort('-height');
        }



         // 2)Limiting Field
        if(req.query.fields){
            const fields = req.query.fields.split(',').join(' ');

            query= query.select(fields)

        }else{
            query = query.select('-__v');
        }



        //3)Pagination
        // page=2&limit=10
        const page = +req.query.page  || 1 ;
        const limit = +req.query.limit || 100 ;
        const skip = (page -1)*limit;
        query = query.skip(skip).limit(limit)

        if(req.query.page){
            const numProducts = await Product.countDocuments();
            if(skip > numProducts) throw new Error('This page does not exist')
        }



        const products=await query;

        res.status(200).json({
                results:products.length,
                data:{
                    products
                }
            })
    }catch(err){     
        res.status(400).json({
            status:'fail',
            message:err.message
        })
    }
}
